/*!
 * ali-oss - lib/client.js
 * Copyright(c) 2014 dead_horse <dead_horse@qq.com>
 * MIT Licensed
 */

(function(
  // Reliable reference to the global object (i.e. window in browsers).
  global,

  // Dummy constructor that we use as the .constructor property for
  // functions that return Generator objects.
  GeneratorFunction,

  // Undefined value, more compressible than void 0.
  undefined
) {
  var hasOwn = Object.prototype.hasOwnProperty;

  if (global.wrapGenerator) {
    return;
  }

  function wrapGenerator(innerFn, self, tryList) {
    return new Generator(innerFn, self || null, tryList || []);
  }

  global.wrapGenerator = wrapGenerator;
  if (typeof exports !== "undefined") {
    exports.wrapGenerator = wrapGenerator;
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  wrapGenerator.mark = function(genFun) {
    genFun.constructor = GeneratorFunction;
    return genFun;
  };

  // Ensure isGeneratorFunction works when Function#name not supported.
  if (GeneratorFunction.name !== "GeneratorFunction") {
    GeneratorFunction.name = "GeneratorFunction";
  }

  wrapGenerator.isGeneratorFunction = function(genFun) {
    var ctor = genFun && genFun.constructor;
    return ctor ? GeneratorFunction.name === ctor.name : false;
  };

  function Generator(innerFn, self, tryList) {
    var generator = this;
    var context = new Context(tryList);
    var state = GenStateSuspendedStart;

    function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        throw new Error("Generator has already finished");
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          try {
            var info = delegate.generator[method](arg);

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

          } catch (uncaught) {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = uncaught;

            continue;
          }

          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          if (state === GenStateSuspendedStart &&
              typeof arg !== "undefined") {
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            throw new TypeError(
              "attempt to send " + JSON.stringify(arg) + " to newborn generator"
            );
          }

          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            delete context.sent;
          }

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }
        }

        state = GenStateExecuting;

        try {
          var value = innerFn.call(self, context);

          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: value,
            done: context.done
          };

          if (value === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } catch (thrown) {
          state = GenStateCompleted;

          if (method === "next") {
            context.dispatchException(thrown);
          } else {
            arg = thrown;
          }
        }
      }
    }

    generator.next = invoke.bind(generator, "next");
    generator.throw = invoke.bind(generator, "throw");
  }

  Generator.prototype.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(triple) {
    var entry = { tryLoc: triple[0] };

    if (1 in triple) {
      entry.catchLoc = triple[1];
    }

    if (2 in triple) {
      entry.finallyLoc = triple[2];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry, i) {
    var record = entry.completion || {};
    record.type = i === 0 ? "normal" : "return";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryList.forEach(pushTryEntry, this);
    this.reset();
  }

  Context.prototype = {
    constructor: Context,

    reset: function() {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      // Pre-initialize at least 20 temporary variables to enable hidden
      // class optimizations for simple generators.
      for (var tempIndex = 0, tempName;
           hasOwn.call(this, tempName = "t" + tempIndex) || tempIndex < 20;
           ++tempIndex) {
        this[tempName] = null;
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    keys: function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    _findFinallyEntry: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") && (
              entry.finallyLoc === finallyLoc ||
              this.prev < entry.finallyLoc)) {
          return entry;
        }
      }
    },

    abrupt: function(type, arg) {
      var entry = this._findFinallyEntry();
      var record = entry ? entry.completion : {};

      record.type = type;
      record.arg = arg;

      if (entry) {
        this.next = entry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      var entry = this._findFinallyEntry(finallyLoc);
      return this.complete(entry.completion);
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry, i);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(generator, resultName, nextLoc) {
      this.delegate = {
        generator: generator,
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}).apply(this, Function("return [this, function GeneratorFunction(){}]")());

wrapGenerator.mark(requestError);
wrapGenerator.mark(getContent);
'use strict';

/**
 * Module dependencies.
 */

var crypto = require('crypto');

var fs = require('fs');
var path = require('path');
var PassThrough = require('stream').PassThrough;
var debug = require('debug')('ali-oss:client');
var copy = require('copy-to');
var is = require('is-type-of');
var read = require('co-read');
var mime = require('mime');
var urllib = require('co-urllib');
var xml = require('xml2js');
var ms = require('ms');

/**
 * Expose `Client`
 */

var exports = module.exports = Client;

exports.create = create;

var DEFAULT_OPTIONS = {
  host: 'oss.aliyuncs.com:8080',
  timeout: '10s'
};

/**
 * aliyun OSS client
 * @param {Object} options
 *   - {String} accessKeyId
 *   - {String} accessKeySecret
 *   - {String} [host]
 *   - {Number} [timeout]
 */

function Client (options) {
  if (!options
    || !options.accessKeyId
    || !options.accessKeySecret
    || !options.bucket) {
    throw new Error('require accessKeyId, accessKeySecret and bucket');
  }
  if (!(this instanceof Client)) {
    return new Client(options);
  }

  copy(options).and(DEFAULT_OPTIONS).to(this);

  if(is.string(this.timeout)) {
    this.timeout = ms(this.timeout);
  }
}

/**
 * prototype
 */

var proto = Client.prototype;

/**
 * get author header
 *
 * "Authorization: OSS " + Access Key Id + ":" + Signature
 *
 * Signature = base64(hmac-sha1(Access Key Secret + "\n"
 *  + VERB + "\n"
 *  + CONTENT-MD5 + "\n"
 *  + CONTENT-TYPE + "\n"
 *  + DATE + "\n"
 *  + CanonicalizedOSSHeaders
 *  + CanonicalizedResource))
 *
 * @param {String} method
 * @param {String} resource
 * @param {Object} header
 * @return {String}
 *
 * @api private
 */

proto.authorization = function (method, resource, headers) {
  var auth = 'OSS ' + this.accessKeyId + ':';
  var params = [
    method.toUpperCase(),
    headers['Content-Md5'],
    headers['Content-Type'],
    headers.Date || new Date().toString()
  ];

  var ossHeaders = {};
  for (var key in headers) {
    var lkey = key.toLowerCase().trim();
    if (lkey.indexOf('x-oss-') === 0) {
      ossHeaders[lkey] = ossHeaders[lkey] || [];
      ossHeaders[lkey].push(headers[key].trim());
    }
  }

  var ossHeadersList = [];
  Object.keys(ossHeaders).sort().forEach(function (key) {
    ossHeadersList.push(key + ':' + ossHeaders[key].join(','));
  });

  params = params.concat(ossHeadersList);

  //TODO: support sub resource
  params.push(resource);

  debug('authorization with params: %j', params);

  var signature = crypto.createHmac('sha1', this.accessKeySecret);
  signature = signature.update(params.join('\n')).digest('base64');
  return auth + signature;
};

/**
 * request oss server
 * @param {Object} params
 *   - {String} name
 *   - {String} method
 *   - {Object} headers
 *   - {Number} timeout
 *   - {Buffer} [content]
 *   - {Stream} [writeStream]
 *
 * @api private
 */

proto.request = wrapGenerator.mark(function(params) {
  var url, type, md5, length, headers, resource;

  return wrapGenerator(function($ctx0) {
    while (1) switch ($ctx0.prev = $ctx0.next) {
    case 0:
      url = 'http://' + this.host + '/' + this.bucket + '/' + params.name;
      type = null;
      md5 = null;
      length = null;

      headers = {
        Date: new Date().toGMTString(),
        Host: this.host
      };

      if (params.content) {
        headers['Content-Type'] = mime.lookup(path.extname(params.name));
        headers['Content-Md5'] = crypto
          .createHash('md5')
          .update(params.content)
          .digest('base64');
        headers['Content-Length'] = params.content.length;
      }

      copy(params.headers).to(headers);
      resource = '/' + this.bucket + '/' + params.name;
      headers.authorization = this.authorization(params.method, resource, headers);
      debug('request %s %s, with headers %j', params.method, url, headers);

      return $ctx0.delegateYield(urllib.request(url, {
        method: params.method,
        content: params.content,
        headers: headers,
        timeout: params.timeout,
        writeStream: params.writeStream
      }), "t0", 11);
    case 11:
      return $ctx0.abrupt("return", $ctx0.t0);
    case 12:
    case "end":
      return $ctx0.stop();
    }
  }, this);
});

/**
 * upload a file to oss
 * @param {Mix} file filepath, fileContent, stream
 * @param {String} name
 * @param {Object} [options]
 *   - {Number} timeout
 *   - {Object} headers
 * @param {Function} callback
 *
 * @api public
 */

proto.upload = wrapGenerator.mark(function(file, name, options) {
  var timeout, content, res;

  return wrapGenerator(function($ctx1) {
    while (1) switch ($ctx1.prev = $ctx1.next) {
    case 0:
      options = options || {};
      timeout = options.timeout || this.timeout;
      return $ctx1.delegateYield(getContent(file), "t1", 3);
    case 3:
      content = $ctx1.t1;
      debug('start update %s with content length %d', name, content.length);

      return $ctx1.delegateYield(this.request({
        name: name,
        content: content,
        headers: options.headers,
        timeout: timeout,
        method: 'PUT'
      }), "t2", 6);
    case 6:
      res = $ctx1.t2;
      debug('upload %s response %s, with data: %s', name, res.status, res.data);

      if (!(res.status === 200)) {
        $ctx1.next = 10;
        break;
      }

      return $ctx1.abrupt("return", null);
    case 10:
      return $ctx1.delegateYield(requestError(res), "t3", 11);
    case 11:
      throw $ctx1.t3;
    case 12:
    case "end":
      return $ctx1.stop();
    }
  }, this);
});

/**
 * get an object from oss
 * support return a buffer, write into file and write into Stream
 *
 * ```
 * get('test.png', stream);
 *
 * get('test.png', './test.png');
 *
 * var content = get('test.png');
 *```
 *
 *
 * @param {String} name
 * @param {Mix} [path]
 *   if give a string file path, will write into this file
 *   if give a writeStream, will write into this stream
 *   if empty, will return a buffer
 * @param {String} Options
 *   - {Number} timeout
 *   - {Objects} headers
 *   ignore if writeStream exist
 * @api public
 */

proto.get = wrapGenerator.mark(function(name, path, options) {
  var writeStream, needDestroy, timeout, res;

  return wrapGenerator(function($ctx2) {
    while (1) switch ($ctx2.prev = $ctx2.next) {
    case 0:
      writeStream = null;
      needDestroy = false;

      if (is.writableStream(path)) {
        writeStream = path;
      } else if (is.string(path)) {
        writeStream = fs.createWriteStream(path);
        needDestroy = true;
      } else {
        options = path;
      }

      options = options || {};
      timeout = options.timeout || this.timeout;
      debug('get file %s', name);
      $ctx2.prev = 6;

      return $ctx2.delegateYield(this.request({
        name: name,
        headers: options.headers,
        timeout: timeout,
        method: 'GET',
        writeStream: writeStream
      }), "t4", 8);
    case 8:
      res = $ctx2.t4;
      $ctx2.next = 14;
      break;
    case 11:
      $ctx2.prev = 11;
      $ctx2.t5 = $ctx2.catch(6);
      throw $ctx2.t5;
    case 14:
      $ctx2.prev = 14;
      needDestroy && writeStream.destroy();
      $ctx2.finish(14);
    case 17:
      debug('get response %s', res.status);

      if (!(res.status === 200)) {
        $ctx2.next = 20;
        break;
      }

      return $ctx2.abrupt("return", res.data);
    case 20:
      return $ctx2.delegateYield(requestError(res), "t6", 21);
    case 21:
      throw $ctx2.t6;
    case 22:
    case "end":
      return $ctx2.stop();
    }
  }, this, [[6, 11, 14]]);
});

/**
 * remove an object from oss
 * @param {String} name
 * @param {Object} options
 *   - {Number} timeout
 */
proto.remove = wrapGenerator.mark(function(name, options) {
  var timeout, res;

  return wrapGenerator(function($ctx3) {
    while (1) switch ($ctx3.prev = $ctx3.next) {
    case 0:
      options = options || {};
      timeout = options.timeout || this.timeout;

      return $ctx3.delegateYield(this.request({
        name: name,
        method: 'DELETE',
        timeout: timeout
      }), "t7", 3);
    case 3:
      res = $ctx3.t7;

      if (!(res.status === 204)) {
        $ctx3.next = 6;
        break;
      }

      return $ctx3.abrupt("return");
    case 6:
      return $ctx3.delegateYield(requestError(res), "t8", 7);
    case 7:
      throw $ctx3.t8;
    case 8:
    case "end":
      return $ctx3.stop();
    }
  }, this);
});

/**
 * get content from string(file path), buffer(file content), stream(file stream)
 * @param {Mix} file
 * @return {Buffer}
 *
 * @api private
 */

function getContent(file) {
  var created, bufs, buf;

  return wrapGenerator(function getContent$($ctx4) {
    while (1) switch ($ctx4.prev = $ctx4.next) {
    case 0:
      if (!is.buffer(file)) {
        $ctx4.next = 2;
        break;
      }

      return $ctx4.abrupt("return", file);
    case 2:
      created = false;

      if (is.string(file)) {
        file = fs.createReadStream(file);
        created = true;
      }

      if (!!is.readableStream(file)) {
        $ctx4.next = 6;
        break;
      }

      throw new TypeError('upload file type error');
    case 6:
      bufs = [];
    case 7:
      $ctx4.next = 9;
      return read(file);
    case 9:
      if (!(buf = $ctx4.sent)) {
        $ctx4.next = 13;
        break;
      }

      bufs.push(buf);
      $ctx4.next = 7;
      break;
    case 13:
      if (created) {
        file.destroy();
      }

      return $ctx4.abrupt("return", Buffer.concat(bufs));
    case 15:
    case "end":
      return $ctx4.stop();
    }
  }, this);
}

/**
 * generater a request error with request response
 * @param {Object} res
 *
 * @api private
 */

function requestError(res) {
  var err, message, info;

  return wrapGenerator(function requestError$($ctx5) {
    while (1) switch ($ctx5.prev = $ctx5.next) {
    case 0:
      if (!(res.status === 404)) {
        $ctx5.next = 4;
        break;
      }

      err = new Error('resource not found');
      err.status = 404;
      return $ctx5.abrupt("return", err);
    case 4:
      message = String(res.data);
      debug('request response error data: %s', message);
      $ctx5.prev = 6;
      $ctx5.next = 9;
      return parseXml(message);
    case 9:
      info = $ctx5.sent;
      $ctx5.next = 17;
      break;
    case 12:
      $ctx5.prev = 12;
      $ctx5.t9 = $ctx5.catch(6);
      $ctx5.t9 = new Error(message);
      $ctx5.t9.status = res.status;
      return $ctx5.abrupt("return", $ctx5.t9);
    case 17:
      info = info && info.Error
      ? info.Error
      : {};

      err = new Error(info.Message || 'request error');
      err.status = res.status;
      err.code = info.Code;
      err.requestId = info.RequestId;
      err.host = info.HostId;
      debug('generate error %j', err);
      return $ctx5.abrupt("return", err);
    case 25:
    case "end":
      return $ctx5.stop();
    }
  }, this, [[6, 12]]);
}

/**
 * thunkify xml.parseString
 * @param {String} str
 *
 * @api private
 */

function parseXml(str) {
  return function (done) {
    xml.parseString(str, done);
  };
}

/**
 * create a new oss client
 *
 * @api public
 */

function create(options) {
  return new Client(options);
}
