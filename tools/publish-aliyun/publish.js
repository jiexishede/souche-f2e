// Generated by CoffeeScript 1.7.1
(function() {
  var OSS, Publish, config, oss, ossApi, path, pub, queuedo, walkdo;

  ossApi = require('./lib/oss_client.js');

  config = require('./config.coffee');

  walkdo = require('walkdo');

  queuedo = require('queuedo');

  path = require('path');

  oss = new ossApi.OssClient(config);

  OSS = {
    pubFile: function(_path) {
      return oss.putObject(config.bucketName, _path.replace(/^\.\//, ''), _path, null, function(err) {
        if (err) {
          return console.log(err);
        } else {
          return console.log('success');
        }
      });
    },
    getFile: function(_path) {
      return oss.getObject(config.bucketName, _path.replace(/^\.\//, ''), "oss_client.test", null, function(err, info) {
        if (err) {
          return console.log(err);
        } else {
          console.log(oss.getObjectEtag(info));
          return console.log(info);
        }
      });
    }
  };

  Publish = function(_config) {
    var k, self, v;
    self = this;
    this.config = {};
    for (k in _config) {
      v = _config[k];
      this.config[k] = v;
    }
    this.middlewares = [];
    return void 0;
  };

  Publish.prototype.addMiddleware = function(ext, middleware) {
    return this.middlewares.push({
      ext: ext,
      middleware: middleware
    });
  };

  Publish.prototype.pub = function(_path) {
    var middlewares, self;
    self = this;
    middlewares = this.middlewares;
    return walkdo(_path, function(file, next, context) {
      console.log(file);
      return self.handleFile(file, function() {
        return next.call(context);
      });
    }, function() {
      return console.log("all finish!");
    });
  };

  Publish.prototype.handleFile = function(file, callback) {
    var self;
    file = file;
    self = this;
    return queuedo(this.middlewares, function(mw, next, context) {
      if (path.extname(file) === mw.ext) {
        return mw.middleware(file, function(error, _file) {
          if (error) {
            console.log(error);
          } else {
            file = _file;
          }
          return next.call(context);
        });
      } else {
        return next.call(context);
      }
    }, function() {
      self.pubFile(file);
      return callback(null);
    });
  };

  Publish.prototype.pubFile = function(file) {
    return OSS.pubFile(file.replace(/^.*assets\//, 'assets/'));
  };

  pub = new Publish({});

  pub.addMiddleware(".js", require("./middleware/mw-compress.coffee"));

  pub.addMiddleware(".less", require("./middleware/mw-less.coffee"));

  pub.addMiddleware(".png", require("./middleware/mw-png.coffee"));

  pub.pub("./test");

}).call(this);
