0 info it worked if it ends with ok
1 verbose cli [ 'node',
1 verbose cli   'c:\\Users\\zilong\\AppData\\Roaming\\npm\\node_modules\\cnpm\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   '--userconfig=c:\\Users\\zilong\\.cnpmrc',
1 verbose cli   '--disturl=http://dist.cnpmjs.org',
1 verbose cli   '--cache=c:\\Users\\zilong\\.npm\\.cache_cnpm',
1 verbose cli   '--registry=http://r.cnpmjs.org',
1 verbose cli   'install',
1 verbose cli   'weak',
1 verbose cli   '--save' ]
2 info using npm@1.4.6
3 info using node@v0.11.10
4 verbose cache add [ 'weak', null ]
5 verbose cache add name=undefined spec="weak" args=["weak",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'weak',
6 verbose parsed url   path: 'weak',
6 verbose parsed url   href: 'weak' }
7 silly lockFile 1ded3053-weak weak
8 verbose lock weak c:\Users\zilong\.npm\.cache_cnpm\1ded3053-weak.lock
9 silly lockFile 1ded3053-weak weak
10 silly lockFile 1ded3053-weak weak
11 verbose addNamed [ 'weak', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 810772c1-weak weak@
14 verbose lock weak@ c:\Users\zilong\.npm\.cache_cnpm\810772c1-weak.lock
15 silly addNameRange { name: 'weak', range: '*', hasData: false }
16 verbose url raw weak
17 verbose url resolving [ 'http://r.cnpmjs.org/', './weak' ]
18 verbose url resolved http://r.cnpmjs.org/weak
19 info trying registry request attempt 1 at 12:18:18
20 http GET http://r.cnpmjs.org/weak
21 http 200 http://r.cnpmjs.org/weak
22 silly registry.get cb [ 200,
22 silly registry.get   { server: 'nginx/1.4.1 (Ubuntu)',
22 silly registry.get     date: 'Wed, 23 Jul 2014 04:18:21 GMT',
22 silly registry.get     'content-type': 'application/json; charset=utf-8',
22 silly registry.get     'transfer-encoding': 'chunked',
22 silly registry.get     connection: 'close',
22 silly registry.get     'x-powered-by': 'koa',
22 silly registry.get     'x-readtime': '19',
22 silly registry.get     'content-encoding': 'gzip' } ]
23 silly addNameRange number 2 { name: 'weak', range: '*', hasData: true }
24 silly addNameRange versions [ 'weak',
24 silly addNameRange   [ '0.3.3',
24 silly addNameRange     '0.3.2',
24 silly addNameRange     '0.3.1',
24 silly addNameRange     '0.3.0',
24 silly addNameRange     '0.2.2',
24 silly addNameRange     '0.2.1',
24 silly addNameRange     '0.2.0',
24 silly addNameRange     '0.1.5',
24 silly addNameRange     '0.1.4',
24 silly addNameRange     '0.1.3',
24 silly addNameRange     '0.1.2',
24 silly addNameRange     '0.1.1',
24 silly addNameRange     '0.1.0',
24 silly addNameRange     '0.0.1' ] ]
25 verbose addNamed [ 'weak', '0.3.3' ]
26 verbose addNamed [ '0.3.3', '0.3.3' ]
27 silly lockFile f9b729a7-weak-0-3-3 weak@0.3.3
28 verbose lock weak@0.3.3 c:\Users\zilong\.npm\.cache_cnpm\f9b729a7-weak-0-3-3.lock
29 silly lockFile f9b729a7-weak-0-3-3 weak@0.3.3
30 silly lockFile f9b729a7-weak-0-3-3 weak@0.3.3
31 silly lockFile 810772c1-weak weak@
32 silly lockFile 810772c1-weak weak@
33 silly resolved [ { author: { name: 'Ben Noordhuis', email: 'info@bnoordhuis.nl' },
33 silly resolved     contributors: [ [Object] ],
33 silly resolved     name: 'weak',
33 silly resolved     description: 'Make weak references to JavaScript Objects.',
33 silly resolved     keywords:
33 silly resolved      [ 'weak',
33 silly resolved        'reference',
33 silly resolved        'js',
33 silly resolved        'javascript',
33 silly resolved        'object',
33 silly resolved        'function',
33 silly resolved        'callback' ],
33 silly resolved     version: '0.3.3',
33 silly resolved     repository:
33 silly resolved      { type: 'git',
33 silly resolved        url: 'git://github.com/TooTallNate/node-weak.git' },
33 silly resolved     main: 'lib/weak.js',
33 silly resolved     scripts:
33 silly resolved      { test: 'mocha -gc --reporter spec',
33 silly resolved        install: 'node-gyp rebuild' },
33 silly resolved     dependencies: { bindings: '*', nan: '~1.2.0' },
33 silly resolved     devDependencies: { mocha: '~1.20.1' },
33 silly resolved     gypfile: true,
33 silly resolved     readme: 'node-weak\n=========\n### Make weak references to JavaScript Objects.\n[![Build Status](https://travis-ci.org/TooTallNate/node-weak.svg?branch=master)](https://travis-ci.org/TooTallNate/node-weak)\n[![Build Status](https://ci.appveyor.com/api/projects/status/09lf09d1a5hm24bq)](https://ci.appveyor.com/project/TooTallNate/node-weak)\n\nOn certain rarer occasions, you run into the need to be notified when a JavaScript\nobject is going to be garbage collected. This feature is exposed to V8\'s C++ API,\nbut not to JavaScript.\n\nThat\'s where `node-weak` comes in! This module exports V8\'s `Persistent<Object>`\nfunctionality to JavaScript. This allows you to create weak references, and\noptionally attach a callback function to any arbitrary JS object. The callback\nfunction will be invoked right before the Object is garbage collected (i.e. after\nthere are no more remaining references to the Object in JS-land).\n\nThis module can, for example, be used for debugging; to determine whether or not\nan Object is being garbage collected as it should.\nTake a look at the example below for commented walkthrough scenario.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install weak\n```\n\n\nExample\n-------\n\nHere\'s an example of calling a `cleanup()` function on a Object before it gets\ngarbage collected:\n\n``` js\nvar weak = require(\'weak\')\n\n// we are going to "monitor" this Object and invoke "cleanup"\n// before the object is garbage collected\nvar obj = {\n    a: true\n  , foo: \'bar\'\n}\n\n// The function to call before Garbage Collection.\n// Note that by the time this is called, \'obj\' has been set to `null`.\nfunction cleanup (o) {\n  delete o.a\n  delete o.foo\n}\n\n// Here\'s where we set up the weak reference\nvar ref = weak(obj, function (obj) {\n  // `this` inside the callback is the EventEmitter.\n  // The first argument to the callback is the `obj`.\n  // DO NOT store any new references to the object, and\n  // DO NOT use the object in any async functions.\n  cleanup(obj)\n})\n\n// While `obj` is alive, `ref` proxies everything to it, so:\nref.a   === obj.a\nref.foo === obj.foo\n\n// Clear out any references to the object, so that it will be GC\'d at some point...\nobj = null\n\n//\n//// Time passes, and the garbage collector is run\n//\n\n// `callback()` above is called, and `ref` now acts like an empty object.\ntypeof ref.foo === \'undefined\'\n```\n\n\nWeak Callback Function "Best Practices"\n---------------------------------------\n\nIt\'s important to be careful when using the "callbacks" feature of `node-weak`,\notherwise you can end up in a situation where the watched object will never\nbe garbage collected.\n\nYou _should **not**_ define the callback function in the same scope as the\nobject that is being watched. It\'s often best to define the callback function\nat the highest scope possible (top-level being the best). Named functions\nwork really well for this:\n\n``` js\nvar http = require(\'http\')\n  , weak = require(\'weak\')\n\nhttp.createServer(function (req, res) {\n  weak(req, gcReq)\n  weak(res, gcRes)\n  res.end(\'Hello World\\n\')\n}).listen(3000)\n\nfunction gcReq () {\n  console.log(\'GC\\\'d `req` object\')\n}\n\nfunction gcRes () {\n  console.log(\'GC\\\'d `res` object\')\n}\n```\n\n\nAPI\n---\n\n### Weakref weak(Object obj [, Function callback])\n\nThe main exports is the function that creates the weak reference.\nThe first argument is the Object that should be monitored.\nThe Object can be a regular Object, an Array, a Function, a RegExp, or any of\nthe primitive types or constructor function created with `new`.\n\nOptionally, you can set a callback function to be invoked\nbefore the object is garbage collected. The callback will\nbe invoked with `obj` as its first argument.\n\n\n### Object weak.get(Weakref ref)\n\n`get()` returns the actual reference to the Object that this weak reference was\ncreated with. If this is called with a dead reference, `undefined` is returned.\n\n\n### Boolean weak.isDead(Weakref ref)\n\nChecks to see if `ref` is a dead reference. Returns `true` if the original Object\nhas already been GC\'d, `false` otherwise.\n\n\n### Boolean weak.isNearDeath(Weakref ref)\n\nChecks to see if `ref` is "near death". This will be `true` exactly during the\nweak reference callback function, and `false` any other time.\n\n\n### Boolean weak.isWeakRef(Object obj)\n\nChecks to see if `obj` is "weak reference" instance. Returns `true` if the\npassed in object is a "weak reference", `false` otherwise.\n\n\n### undefined weak.addCallback(Weakref ref, Function callback)\n\nAdds `callback` to the Array of callback functions that will be invoked before the\nObject gets garbage collected. The callbacks get executed in the order that they\nare added.\n\n\n### Array weak.callbacks(Weakref ref)\n\nReturns the internal `Array` that `ref` iterates through to invoke the GC\ncallbacks. The array can be `push()`ed or `unshift()`ed onto, to have more control\nover the execution order of the callbacks. This is similar in concept to node\'s\n`EventEmitter#listeners()` function.\n',
33 silly resolved     readmeFilename: 'README.md',
33 silly resolved     bugs: { url: 'https://github.com/TooTallNate/node-weak/issues' },
33 silly resolved     homepage: 'https://github.com/TooTallNate/node-weak',
33 silly resolved     _id: 'weak@0.3.3',
33 silly resolved     _from: 'weak@' } ]
34 info install weak@0.3.3 into E:\souche\souche-f2e
35 info installOne weak@0.3.3
36 info E:\souche\souche-f2e\node_modules\weak unbuild
37 verbose tar unpack c:\Users\zilong\.npm\.cache_cnpm\weak\0.3.3\package.tgz
38 silly lockFile 87621246-che-souche-f2e-node-modules-weak tar://E:\souche\souche-f2e\node_modules\weak
39 verbose lock tar://E:\souche\souche-f2e\node_modules\weak c:\Users\zilong\.npm\.cache_cnpm\87621246-che-souche-f2e-node-modules-weak.lock
40 silly lockFile 604fe406-ache-cnpm-weak-0-3-3-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\weak\0.3.3\package.tgz
41 verbose lock tar://c:\Users\zilong\.npm\.cache_cnpm\weak\0.3.3\package.tgz c:\Users\zilong\.npm\.cache_cnpm\604fe406-ache-cnpm-weak-0-3-3-package-tgz.lock
42 silly gunzTarPerm modes [ '755', '644' ]
43 silly gunzTarPerm extractEntry package.json
44 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
45 silly gunzTarPerm extractEntry .npmignore
46 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
47 silly gunzTarPerm extractEntry README.md
48 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
49 silly gunzTarPerm extractEntry LICENSE
50 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
51 silly gunzTarPerm extractEntry History.md
52 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
53 silly gunzTarPerm extractEntry .travis.yml
54 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
55 silly gunzTarPerm extractEntry binding.gyp
56 silly gunzTarPerm modified mode [ 'binding.gyp', 438, 420 ]
57 silly gunzTarPerm extractEntry lib/weak.js
58 silly gunzTarPerm modified mode [ 'lib/weak.js', 438, 420 ]
59 silly gunzTarPerm extractEntry test/buffer.js
60 silly gunzTarPerm modified mode [ 'test/buffer.js', 438, 420 ]
61 silly gunzTarPerm extractEntry test/callback.js
62 silly gunzTarPerm modified mode [ 'test/callback.js', 438, 420 ]
63 silly gunzTarPerm extractEntry test/create.js
64 silly gunzTarPerm modified mode [ 'test/create.js', 438, 420 ]
65 silly gunzTarPerm extractEntry test/exports.js
66 silly gunzTarPerm modified mode [ 'test/exports.js', 438, 420 ]
67 silly gunzTarPerm extractEntry test/weakref.js
68 silly gunzTarPerm modified mode [ 'test/weakref.js', 438, 420 ]
69 silly gunzTarPerm extractEntry src/weakref.cc
70 silly gunzTarPerm modified mode [ 'src/weakref.cc', 438, 420 ]
71 silly gunzTarPerm extractEntry appveyor.yml
72 silly gunzTarPerm modified mode [ 'appveyor.yml', 438, 420 ]
73 silly lockFile 87621246-che-souche-f2e-node-modules-weak tar://E:\souche\souche-f2e\node_modules\weak
74 silly lockFile 87621246-che-souche-f2e-node-modules-weak tar://E:\souche\souche-f2e\node_modules\weak
75 silly lockFile 604fe406-ache-cnpm-weak-0-3-3-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\weak\0.3.3\package.tgz
76 silly lockFile 604fe406-ache-cnpm-weak-0-3-3-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\weak\0.3.3\package.tgz
77 info preinstall weak@0.3.3
78 verbose readDependencies using package.json deps
79 verbose readDependencies using package.json deps
80 verbose cache add [ 'bindings@*', null ]
81 verbose cache add name=undefined spec="bindings@*" args=["bindings@*",null]
82 verbose parsed url { protocol: null,
82 verbose parsed url   slashes: null,
82 verbose parsed url   auth: null,
82 verbose parsed url   host: null,
82 verbose parsed url   port: null,
82 verbose parsed url   hostname: null,
82 verbose parsed url   hash: null,
82 verbose parsed url   search: null,
82 verbose parsed url   query: null,
82 verbose parsed url   pathname: 'bindings@*',
82 verbose parsed url   path: 'bindings@*',
82 verbose parsed url   href: 'bindings@*' }
83 verbose cache add name="bindings" spec="*" args=["bindings","*"]
84 verbose parsed url { protocol: null,
84 verbose parsed url   slashes: null,
84 verbose parsed url   auth: null,
84 verbose parsed url   host: null,
84 verbose parsed url   port: null,
84 verbose parsed url   hostname: null,
84 verbose parsed url   hash: null,
84 verbose parsed url   search: null,
84 verbose parsed url   query: null,
84 verbose parsed url   pathname: '*',
84 verbose parsed url   path: '*',
84 verbose parsed url   href: '*' }
85 verbose addNamed [ 'bindings', '*' ]
86 verbose addNamed [ null, '*' ]
87 silly lockFile a3858fc2-bindings bindings@*
88 verbose lock bindings@* c:\Users\zilong\.npm\.cache_cnpm\a3858fc2-bindings.lock
89 verbose cache add [ 'nan@~1.2.0', null ]
90 verbose cache add name=undefined spec="nan@~1.2.0" args=["nan@~1.2.0",null]
91 verbose parsed url { protocol: null,
91 verbose parsed url   slashes: null,
91 verbose parsed url   auth: null,
91 verbose parsed url   host: null,
91 verbose parsed url   port: null,
91 verbose parsed url   hostname: null,
91 verbose parsed url   hash: null,
91 verbose parsed url   search: null,
91 verbose parsed url   query: null,
91 verbose parsed url   pathname: 'nan@~1.2.0',
91 verbose parsed url   path: 'nan@~1.2.0',
91 verbose parsed url   href: 'nan@~1.2.0' }
92 verbose cache add name="nan" spec="~1.2.0" args=["nan","~1.2.0"]
93 verbose parsed url { protocol: null,
93 verbose parsed url   slashes: null,
93 verbose parsed url   auth: null,
93 verbose parsed url   host: null,
93 verbose parsed url   port: null,
93 verbose parsed url   hostname: null,
93 verbose parsed url   hash: null,
93 verbose parsed url   search: null,
93 verbose parsed url   query: null,
93 verbose parsed url   pathname: '~1.2.0',
93 verbose parsed url   path: '~1.2.0',
93 verbose parsed url   href: '~1.2.0' }
94 verbose addNamed [ 'nan', '~1.2.0' ]
95 verbose addNamed [ null, '>=1.2.0-0 <1.3.0-0' ]
96 silly lockFile 6bb36ab7-nan-1-2-0 nan@~1.2.0
97 verbose lock nan@~1.2.0 c:\Users\zilong\.npm\.cache_cnpm\6bb36ab7-nan-1-2-0.lock
98 silly addNameRange { name: 'bindings', range: '*', hasData: false }
99 silly addNameRange { name: 'nan', range: '>=1.2.0-0 <1.3.0-0', hasData: false }
100 verbose url raw bindings
101 verbose url resolving [ 'http://r.cnpmjs.org/', './bindings' ]
102 verbose url resolved http://r.cnpmjs.org/bindings
103 info trying registry request attempt 1 at 12:18:19
104 http GET http://r.cnpmjs.org/bindings
105 verbose url raw nan
106 verbose url resolving [ 'http://r.cnpmjs.org/', './nan' ]
107 verbose url resolved http://r.cnpmjs.org/nan
108 info trying registry request attempt 1 at 12:18:19
109 http GET http://r.cnpmjs.org/nan
110 http 200 http://r.cnpmjs.org/bindings
111 silly registry.get cb [ 200,
111 silly registry.get   { server: 'nginx/1.4.1 (Ubuntu)',
111 silly registry.get     date: 'Wed, 23 Jul 2014 04:18:21 GMT',
111 silly registry.get     'content-type': 'application/json; charset=utf-8',
111 silly registry.get     'transfer-encoding': 'chunked',
111 silly registry.get     connection: 'close',
111 silly registry.get     'x-powered-by': 'koa',
111 silly registry.get     'x-readtime': '35',
111 silly registry.get     'content-encoding': 'gzip' } ]
112 silly addNameRange number 2 { name: 'bindings', range: '*', hasData: true }
113 silly addNameRange versions [ 'bindings',
113 silly addNameRange   [ '1.2.1',
113 silly addNameRange     '1.2.0',
113 silly addNameRange     '1.1.1',
113 silly addNameRange     '1.1.0',
113 silly addNameRange     '1.0.0',
113 silly addNameRange     '0.4.0',
113 silly addNameRange     '0.3.0',
113 silly addNameRange     '0.2.4',
113 silly addNameRange     '0.2.3',
113 silly addNameRange     '0.2.2',
113 silly addNameRange     '0.2.1',
113 silly addNameRange     '0.2.0',
113 silly addNameRange     '0.1.1',
113 silly addNameRange     '0.1.0',
113 silly addNameRange     '0.0.1' ] ]
114 verbose addNamed [ 'bindings', '1.2.1' ]
115 verbose addNamed [ '1.2.1', '1.2.1' ]
116 silly lockFile e9060511-bindings-1-2-1 bindings@1.2.1
117 verbose lock bindings@1.2.1 c:\Users\zilong\.npm\.cache_cnpm\e9060511-bindings-1-2-1.lock
118 silly lockFile e9060511-bindings-1-2-1 bindings@1.2.1
119 silly lockFile e9060511-bindings-1-2-1 bindings@1.2.1
120 silly lockFile a3858fc2-bindings bindings@*
121 silly lockFile a3858fc2-bindings bindings@*
122 http 200 http://r.cnpmjs.org/nan
123 silly registry.get cb [ 200,
123 silly registry.get   { server: 'nginx/1.4.1 (Ubuntu)',
123 silly registry.get     date: 'Wed, 23 Jul 2014 04:18:22 GMT',
123 silly registry.get     'content-type': 'application/json; charset=utf-8',
123 silly registry.get     'transfer-encoding': 'chunked',
123 silly registry.get     connection: 'close',
123 silly registry.get     'x-powered-by': 'koa',
123 silly registry.get     'x-readtime': '80',
123 silly registry.get     'content-encoding': 'gzip' } ]
124 silly addNameRange number 2 { name: 'nan', range: '>=1.2.0-0 <1.3.0-0', hasData: true }
125 silly addNameRange versions [ 'nan',
125 silly addNameRange   [ '1.2.0',
125 silly addNameRange     '1.1.2',
125 silly addNameRange     '1.1.1',
125 silly addNameRange     '1.1.0',
125 silly addNameRange     '1.0.0',
125 silly addNameRange     '0.8.0',
125 silly addNameRange     '0.7.1',
125 silly addNameRange     '0.7.0',
125 silly addNameRange     '0.6.0',
125 silly addNameRange     '0.5.2',
125 silly addNameRange     '0.5.1',
125 silly addNameRange     '0.5.0',
125 silly addNameRange     '0.4.4',
125 silly addNameRange     '0.4.3',
125 silly addNameRange     '0.4.2',
125 silly addNameRange     '0.4.1',
125 silly addNameRange     '0.4.0',
125 silly addNameRange     '0.3.2',
125 silly addNameRange     '0.3.1',
125 silly addNameRange     '0.3.0',
125 silly addNameRange     '0.3.0-wip2',
125 silly addNameRange     '0.3.0-wip' ] ]
126 verbose addNamed [ 'nan', '1.2.0' ]
127 verbose addNamed [ '1.2.0', '1.2.0' ]
128 silly lockFile 859d0f28-nan-1-2-0 nan@1.2.0
129 verbose lock nan@1.2.0 c:\Users\zilong\.npm\.cache_cnpm\859d0f28-nan-1-2-0.lock
130 silly lockFile 859d0f28-nan-1-2-0 nan@1.2.0
131 silly lockFile 859d0f28-nan-1-2-0 nan@1.2.0
132 silly lockFile 6bb36ab7-nan-1-2-0 nan@~1.2.0
133 silly lockFile 6bb36ab7-nan-1-2-0 nan@~1.2.0
134 silly resolved [ { name: 'bindings',
134 silly resolved     description: 'Helper module for loading your native module\'s .node file',
134 silly resolved     keywords: [ 'native', 'addon', 'bindings', 'gyp', 'waf', 'c', 'c++' ],
134 silly resolved     version: '1.2.1',
134 silly resolved     author:
134 silly resolved      { name: 'Nathan Rajlich',
134 silly resolved        email: 'nathan@tootallnate.net',
134 silly resolved        url: 'http://tootallnate.net' },
134 silly resolved     repository:
134 silly resolved      { type: 'git',
134 silly resolved        url: 'git://github.com/TooTallNate/node-bindings.git' },
134 silly resolved     main: './bindings.js',
134 silly resolved     bugs: { url: 'https://github.com/TooTallNate/node-bindings/issues' },
134 silly resolved     homepage: 'https://github.com/TooTallNate/node-bindings',
134 silly resolved     license: 'MIT',
134 silly resolved     readme: 'node-bindings\n=============\n### Helper module for loading your native module\'s .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the "swiss army knife" of `require()`ing your native module\'s\n`.node` file.\n\nThroughout the course of Node\'s native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `"dependencies"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require(\'bindings\')(\'binding.node\')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n → /Users/nrajlich/ref/build/binding.node\n → /Users/nrajlich/ref/build/Debug/binding.node\n → /Users/nrajlich/ref/build/Release/binding.node\n → /Users/nrajlich/ref/out/Debug/binding.node\n → /Users/nrajlich/ref/Debug/binding.node\n → /Users/nrajlich/ref/out/Release/binding.node\n → /Users/nrajlich/ref/Release/binding.node\n → /Users/nrajlich/ref/build/default/binding.node\n → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
134 silly resolved     readmeFilename: 'README.md',
134 silly resolved     _id: 'bindings@1.2.1',
134 silly resolved     _from: 'bindings@*' },
134 silly resolved   { name: 'nan',
134 silly resolved     version: '1.2.0',
134 silly resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
134 silly resolved     main: 'include_dirs.js',
134 silly resolved     repository: { type: 'git', url: 'git://github.com/rvagg/nan.git' },
134 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
134 silly resolved     license: 'MIT',
134 silly resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10 and 0.11, and eventually 0.12.**\n\n***Current version: 1.2.0*** *(See [nan.h](https://github.com/rvagg/nan/blob/master/nan.h) for complete ChangeLog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6)](https://nodei.co/npm/nan/)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.11/0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[News & Updates](#news)**\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n\n<a name="news"></a>\n## News & Updates\n\n### May-2014: 1.1.0 release\n\n* We\'ve deprecated `NanSymbol()`, you should just use `NanNew<String>()` now.\n* `NanNull()`, `NanUndefined()`, `NanTrue()`, `NanFalse()` all return `Local`s now.\n* `nan_isolate` is gone, it was intended to be internal-only but if you were using it then you should switch to `v8::Isolate::GetCurrent()`.\n* `NanNew()` has received some additional overload-love so you should be able to give it many kinds of values without specifying the `<Type>`.\n* Lots of small fixes and additions to expand the V8 API coverage, *use the source, Luke*.\n\n\n### May-2014: Major changes for V8 3.25 / Node 0.11.13\n\nNode 0.11.11 and 0.11.12 were both broken releases for native add-ons, you simply can\'t properly compile against either of them for different reasons. But we now have a 0.11.13 release that jumps a couple of versions of V8 ahead and includes some more, major (traumatic) API changes.\n\nBecause we are now nearing Node 0.12 and estimate that the version of V8 we are using in Node 0.11.13 will be close to the API we get for 0.12, we have taken the opportunity to not only *fix* NAN for 0.11.13 but make some major changes to improve the NAN API.\n\nWe have **removed support for Node 0.11 versions prior to 0.11.13**. As usual, our tests are run against (and pass) the last 5 versions of Node 0.8 and Node 0.10. We also include Node 0.11.13 obviously.\n\nThe major change is something that [Benjamin Byholm](kkoopa) has put many hours in to. We now have a fantastic new `NanNew<T>(args)` interface for creating new `Local`s, this replaces `NanNewLocal()` and much more. If you look in [./nan.h](nan.h) you\'ll see a large number of overloaded versions of this method. In general you should be able to `NanNew<Type>(arguments)` for any type you want to make a `Local` from. This includes `Persistent` types, so we now have a `Local<T> NanNew(const Persistent<T> arg)` to replace `NanPersistentToLocal()`.\n\nWe also now have `NanUndefined()`, `NanNull()`, `NanTrue()` and `NanFalse()`. Mainly because of the new requirement for an `Isolate` argument for each of the native V8 versions of this.\n\nV8 has now introduced an `EscapableHandleScope` from which you `scope.Escape(Local<T> value)` to *return* a value from a one scope to another. This replaces the standard `HandleScope` and `scope.Close(Local<T> value)`, although `HandleScope` still exists for when you don\'t need to return a handle to the caller. For NAN we are exposing it as `NanEscapableScope()` and `NanEscapeScope()`, while `NanScope()` is still how you create a new scope that doesn\'t need to return handles. For older versions of Node/V8, it\'ll still map to the older `HandleScope` functionality.\n\n`NanFromV8String()` was deprecated and has now been removed. You should use `NanCString()` or `NanRawString()` instead.\n\nBecause `node::MakeCallback()` now takes an `Isolate`, and because it doesn\'t exist in older versions of Node, we\'ve introduced `NanMakeCallback()`. You should *always* use this when calling a JavaScript function from C++.\n\nThere\'s lots more, check out the Changelog in nan.h or look through [#86](https://github.com/rvagg/nan/pull/86) for all the gory details.\n\n### Dec-2013: NanCString and NanRawString\n\nTwo new functions have been introduced to replace the functionality that\'s been provided by `NanFromV8String` until now. NanCString has sensible defaults so it\'s super easy to fetch a null-terminated c-style string out of a `v8::String`. `NanFromV8String` is still around and has defaults that allow you to pass a single handle to fetch a `char*` while `NanRawString` requires a little more attention to arguments.\n\n### Nov-2013: Node 0.11.9+ breaking V8 change\n\nThe version of V8 that\'s shipping with Node 0.11.9+ has changed the signature for new `Local`s to: `v8::Local<T>::New(isolate, value)`, i.e. introducing the `isolate` argument and therefore breaking all new `Local` declarations for previous versions. NAN 0.6+ now includes a `NanNewLocal<T>(value)` that can be used in place to work around this incompatibility and maintain compatibility with 0.8->0.11.9+ (minus a few early 0.11 releases).\n\nFor example, if you wanted to return a `null` on a callback you will have to change the argument from `v8::Local<v8::Value>::New(v8::Null())` to `NanNewLocal<v8::Value>(v8::Null())`.\n\n### Nov-2013: Change to binding.gyp `"include_dirs"` for NAN\n\nInclusion of NAN in a project\'s binding.gyp is now greatly simplified. You can now just use `"<!(node -e \\"require(\'nan\')\\")"` in your `"include_dirs"`, see example below (note Windows needs the quoting around `require` to be just right: `"require(\'nan\')"` with appropriate `\\` escaping).\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n``` bash\n$ npm install --save nan\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include <nan.h>` in your *.cpp* files:\n\n``` python\n"include_dirs" : [\n    "<!(node -e \\"require(\'nan\')\\")"\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/rvagg/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/rvagg/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include <nan.h>\n// ...\n\nusing v8::FunctionTemplate;\nusing v8::Handle;\nusing v8::Object;\nusing v8::String;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanNew<String>("calculateSync"),\n    NanNew<FunctionTemplate>(CalculateSync)->GetFunction());\n\n  exports->Set(NanNew<String>("calculateAsync"),\n    NanNew<FunctionTemplate>(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include <nan.h>\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include <nan.h>\n#include "./sync.h"\n// ...\n\nusing v8::Number;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(NanNew<Number>(est));\n}\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include <nan.h>\n#include "./async.h"\n\n// ...\n\nusing v8::Function;\nusing v8::Local;\nusing v8::Null;\nusing v8::Number;\nusing v8::Value;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        NanNull()\n      , NanNew<Number>(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_index_getter"><b><code>NAN_INDEX_GETTER</code></b></a>\n * <a href="#api_nan_index_setter"><b><code>NAN_INDEX_SETTER</code></b></a>\n * <a href="#api_nan_index_enumerator"><b><code>NAN_INDEX_ENUMERATOR</code></b></a>\n * <a href="#api_nan_index_deleter"><b><code>NAN_INDEX_DELETER</code></b></a>\n * <a href="#api_nan_index_query"><b><code>NAN_INDEX_QUERY</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_deprecated"><b><code>NAN_DEPRECATED</code></b></a>\n * <a href="#api_nan_inline"><b><code>NAN_INLINE</code></b></a>\n * <a href="#api_nan_new"><b><code>NanNew</code></b></a>\n * <a href="#api_nan_undefined"><b><code>NanUndefined</code></b></a>\n * <a href="#api_nan_null"><b><code>NanNull</code></b></a>\n * <a href="#api_nan_true"><b><code>NanTrue</code></b></a>\n * <a href="#api_nan_false"><b><code>NanFalse</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_escapable_scope"><b><code>NanEscapableScope</code></b></a>\n * <a href="#api_nan_escape_scope"><b><code>NanEscapeScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <del><a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a></del>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <a href="#api_nan_raw_string"><b><code>NanRawString</code></b></a>\n * <a href="#api_nan_c_string"><b><code>NanCString</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_error"><b><code>NanError</code></b>, <b><code>NanTypeError</code></b>, <b><code>NanRangeError</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a>\n * <a href="#api_nan_get_current_context"><b><code>NanGetCurrentContext</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_dispose_persistent"><b><code>NanDisposePersistent</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_make_weak_persistent"><b><code>NanMakeWeakPersistent</code></b></a>\n * <a href="#api_nan_set_template"><b><code>NanSetTemplate</code></b></a>\n * <a href="#api_nan_set_prototype_template"><b><code>NanSetPrototypeTemplate</code></b></a>\n * <a href="#api_nan_make_callback"><b><code>NanMakeCallback</code></b></a>\n * <a href="#api_nan_compile_script"><b><code>NanCompileScript</code></b></a>\n * <a href="#api_nan_run_script"><b><code>NanRunScript</code></b></a>\n * <a href="#api_nan_adjust_external_memory"><b><code>NanAdjustExternalMemory</code></b></a>\n * <a href="#api_nan_add_gc_epilogue_callback"><b><code>NanAddGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_add_gc_prologue_callback"><b><code>NanAddGCPrologueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_epilogue_callback"><b><code>NanRemoveGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_prologue_callback"><b><code>NanRemoveGCPrologueCallback</code></b></a>\n * <a href="#api_nan_get_heap_statistics"><b><code>NanGetHeapStatistics</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_index_getter"></a>\n### NAN_INDEX_GETTER(cbname)\nUse `NAN_INDEX_GETTER` to declare your V8 accessible index getters. You get a `uint32_t` `index` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_GETTER`.\n\n<a name="api_nan_index_setter"></a>\n### NAN_INDEX_SETTER(cbname)\nUse `NAN_INDEX_SETTER` to declare your V8 accessible index setters. Same as `NAN_INDEX_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_index_enumerator"></a>\n### NAN_INDEX_ENUMERATOR(cbname)\nUse `NAN_INDEX_ENUMERATOR` to declare your V8 accessible index enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_INDEX_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_ENUMERATOR`.\n\n<a name="api_nan_index_deleter"></a>\n### NAN_INDEX_DELETER(cbname)\nUse `NAN_INDEX_DELETER` to declare your V8 accessible index deleters. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_DELETER`.\n\n<a name="api_nan_index_query"></a>\n### NAN_INDEX_QUERY(cbname)\nUse `NAN_INDEX_QUERY` to declare your V8 accessible index queries. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_QUERY`.\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(cbname)\n\nUse `NAN_WEAK_CALLBACK` to define your V8 WeakReference callbacks. There is an argument object `const _NanWeakCallbackData<T, P> &data` allowing access to the weak object and the supplied parameter through its `GetValue` and `GetParameter` methods. You can even access the weak callback info object through the `GetCallbackInfo()`method, but you probably should not. `Revive()` keeps the weak object alive until the next GC round.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n  int *parameter = data.GetParameter();\n  NanMakeCallback(NanGetCurrentContext()->Global(), data.GetValue(), 0, NULL);\n  if ((*parameter)++ == 0) {\n    data.Revive();\n  } else {\n    delete parameter;\n  }\n}\n```\n\n<a name="api_nan_deprecated"></a>\n### NAN_DEPRECATED\nDeclares a function as deprecated.\n\n```c++\nstatic NAN_DEPRECATED NAN_METHOD(foo) {\n  ...\n}\n```\n\n<a name="api_nan_inline"></a>\n### NAN_INLINE\nInlines a function.\n\n```c++\nNAN_INLINE int foo(int bar) {\n  ...\n}\n```\n\n<a name="api_nan_new"></a>\n### Local&lt;T&gt; NanNew&lt;T&gt;( ... )\n\nUse `NanNew` to construct almost all v8 objects and make new local handles.\n\n```c++\nLocal<String> s = NanNew<String>("value");\n\n...\n\nPersistent<Object> o;\n\n...\n\nLocal<Object> lo = NanNew(o);\n\n```\n\n<a name="api_nan_undefined"></a>\n### Local&lt;Primitive&gt; NanUndefined()\n\nUse instead of `Undefined()`\n\n<a name="api_nan_null"></a>\n### Local&lt;Primitive&gt; NanNull()\n\nUse instead of `Null()`\n\n<a name="api_nan_true"></a>\n### Local&lt;Boolean&gt; NanTrue()\n\nUse instead of `True()`\n\n<a name="api_nan_false"></a>\n### Local&lt;Boolean&gt; NanFalse()\n\nUse instead of `False()`\n\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope` when you do not wish to return handles (`Handle` or `Local`) to the surrounding scope (or in functions directly exposed to V8, as they do not return values in the normal sense):\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nThis method is not directly exposed to V8, nor does it return a handle, so it uses an unescapable scope:\n\n```c++\nbool Foo::Bar() {\n  NanScope();\n  \n  Local<Boolean> val = NanFalse();\n  ...\n  return val->Value();\n}\n```\n\n<a name="api_nan_escapable_scope"></a>\n### NanEscapableScope()\n\nThe separation of handle scopes into escapable and inescapable scopes makes `NanEscapableScope()` necessary, use it in place of `HandleScope scope` when you later wish to return a handle (`Handle` or `Local`) from the scope, this is for internal functions not directly exposed to V8:\n\n```c++\nHandle<String> Foo::Bar() {\n  NanEscapableScope();\n\n  return NanEscapeScope(NanNew<String>("FooBar!"));\n}\n```\n\n<a name="api_nan_escape_scope"></a>\n### Local&lt;T&gt; NanEscapeScope(Handle&lt;T&gt; value);\nUse together with `NanEscapableScope` to escape the scope. Corresponds to `HandleScope::Close` or `EscapableHandleScope::Escape`.\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanNew(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(Object)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(NanNew<String>("end"))\n```\n\n<a name="api_nan_symbol"></a>\n### <del>Local&lt;String&gt; NanSymbol(const char *)</del>\n\nDeprecated. Use `NanNew<String>` instead.\n<del>Use to create string symbol objects (i.e. `v8::String::NewSymbol(x)`), for getting and setting object properties, or names of objects.</del>\n\n```c++\nbool foo = false;\nif (obj->Has(NanNew<String>("foo")))\n  foo = optionsObj->Get(NanNew<String>("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply returns `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_raw_string"></a>\n### void* NanRawString(Handle&lt;Value&gt;, enum Nan::Encoding, size_t *, void *, size_t, int)\n\nWhen you want to convert a V8 `String` to a `char*` buffer, use `NanRawString`. You have to supply an encoding as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows setting `String::WriteOptions`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nvoid* decoded = NanRawString(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\n...\ndelete[] decoded;\n```\n\n<a name="api_nan_c_string"></a>\n### char* NanCString(Handle&lt;Value&gt;, size_t *[, char *, size_t, int])\n\nWhen you want to convert a V8 `String` to a null-terminated C `char*` use `NanCString`. The resulting `char*` will be UTF-8-encoded, and you need to supply a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `v8::String::NO_OPTIONS`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nchar* name = NanCString(args[0], &count);\n...\ndelete[] name;\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanNew<String>("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanNew<String>("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanNew<String>("count"), 1024);\n```\n\n<a name="api_nan_error"></a>\n### NanError(message), NanTypeError(message), NanRangeError(message)\n\nFor making `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nLocal<Value> res = NanError("you must supply a callback argument");\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nNanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NanFreeCallback` and a hint for the garbage collector.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a name="api_nan_new_context_handle"></a>\n### Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])\nCreates a new `Local<Context>` handle.\n\n```c++\nLocal<FunctionTemplate> ftmpl = NanNew<FunctionTemplate>();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a name="api_nan_get_current_context"></a>\n### Local&lt;Context&gt; NanGetCurrentContext()\n\nGets the current context.\n\n```c++\nLocal<Context> ctx = NanGetCurrentContext();\n```\n\n<a name="api_nan_dispose_persistent"></a>\n### void NanDisposePersistent(Persistent&lt;T&gt; &)\n\nUse `NanDisposePersistent` to dispose a `Persistent` handle.\n\n```c++\nNanDisposePersistent(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = NanNew<Object>();\nobj->Set(NanNew<String>("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(persistentHandle, obj)\n```\n\n<a name="api_nan_make_weak_persistent"></a>\n### _NanWeakCallbackInfo&lt;T, P&gt;* NanMakeWeakPersistent(Handle&lt;T&gt;, P*, _NanWeakCallbackInfo&lt;T, P&gt;::Callback)\n\nCreates a weak persistent handle with the supplied parameter and `NAN_WEAK_CALLBACK`.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n\n...\n\n}\n\nLocal<Function> func;\n\n...\n\nint *parameter = new int(0);\nNanMakeWeakPersistent(func, parameter, &weakCallback);\n```\n\n<a name="api_nan_set_template"></a>\n### NanSetTemplate(templ, name, value)\n\nUse to add properties on object and function templates.\n\n<a name="api_nan_set_prototype_template"></a>\n### NanSetPrototypeTemplate(templ, name, value)\n\nUse to add prototype properties on function templates.\n\n<a name="api_nan_make_callback"></a>\n### NanMakeCallback(target, func, argc, argv)\n\nUse instead of `node::MakeCallback` to call javascript functions. This is the only proper way of calling functions.\n\n<a name="api_nan_compile_script"></a>\n### NanCompileScript(Handle<String> s [, const ScriptOrigin&amp; origin])\n\nUse to create new scripts bound to the current context.\n\n<a name="api_nan_run_script"></a>\n### NanRunScript(script)\n\nUse to run both bound and unbound scripts.\n\n<a name="api_nan_adjust_external_memory"></a>\n### NanAdjustExternalMemory(int change_in_bytes)\n\nSimply does `AdjustAmountOfExternalAllocatedMemory`\n\n<a name="api_nan_add_gc_epilogue_callback"></a>\n### NanAddGCEpilogueCallback(GCEpilogueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCEpilogueCallback`\n\n<a name="api_nan_add_gc_prologue_callback"></a>\n### NanAddGCPrologueCallback(GCPrologueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCPrologueCallback`\n\n<a name="api_nan_remove_gc_epilogue_callback"></a>\n### NanRemoveGCEpilogueCallback(GCEpilogueCallback callback)\n\nSimply does `RemoveGCEpilogueCallback`\n\n<a name="api_nan_remove_gc_prologue_callback"></a>\n### NanRemoveGCPrologueCallback(GCPrologueCallback callback)\n\nSimply does `RemoveGCPrologueCallback`\n\n<a name="api_nan_get_heap_statistics"></a>\n### NanGetHeapStatistics(HeapStatistics *heap_statistics)\n\nSimply does `GetHeapStatistics`\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Handle<Function>` is annoyingly tricky. `NanCallback` makes it easier by taking your handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nHandle<Value> argv[] = {\n  NanError(NanNew<String>("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nHandle<Value> argv[] = {\n  NanNull(),\n  NanNew<String>("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetCallback()` method that you can use\nto fetch a local handle to the underlying callback function, as well  as a\n`void SetFunction(Handle<Function>)` for setting the callback on the\n`NanCallback`. You can check if a `NanCallback` is empty with the `bool IsEmpty()` method. Additionally a generic constructor is available for using\n`NanCallback` without performing heap allocations.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `ErrorMessage()` and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then use `SetErrorMessage()` to set an error message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SaveToPersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n  \n  // Get the error message (or NULL)\n  const char *ErrorMessage();\n  \n  // Set an error message\n  void SetErrorMessage(const char *msg);\n  \nprotected:\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n### Contributors\n\nNAN is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td><td>-</td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n<tr><th align="left">Nathan Rajlich</th><td><a href="https://github.com/TooTallNate">GitHub/TooTallNate</a></td><td><a href="http://twitter.com/TooTallNate">Twitter/@TooTallNate</a></td></tr>\n<tr><th align="left">Brett Lawson</th><td><a href="https://github.com/brett19">GitHub/brett19</a></td><td><a href="http://twitter.com/brett19x">Twitter/@brett19x</a></td></tr>\n<tr><th align="left">Ben Noordhuis</th><td><a href="https://github.com/bnoordhuis">GitHub/bnoordhuis</a></td><td><a href="http://twitter.com/bnoordhuis">Twitter/@bnoordhuis</a></td></tr>\n</tbody></table>\n\nLicence &amp; copyright\n-----------------------\n\nCopyright (c) 2014 NAN contributors (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT +no-false-attribs license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
134 silly resolved     readmeFilename: 'README.md',
134 silly resolved     bugs: { url: 'https://github.com/rvagg/nan/issues' },
134 silly resolved     homepage: 'https://github.com/rvagg/nan',
134 silly resolved     _id: 'nan@1.2.0',
134 silly resolved     _from: 'nan@~1.2.0' } ]
135 info install bindings@1.2.1 into E:\souche\souche-f2e\node_modules\weak
136 info install nan@1.2.0 into E:\souche\souche-f2e\node_modules\weak
137 info installOne bindings@1.2.1
138 info installOne nan@1.2.0
139 info E:\souche\souche-f2e\node_modules\weak\node_modules\bindings unbuild
140 info E:\souche\souche-f2e\node_modules\weak\node_modules\nan unbuild
141 verbose tar unpack c:\Users\zilong\.npm\.cache_cnpm\bindings\1.2.1\package.tgz
142 silly lockFile d1dd3455-dules-weak-node-modules-bindings tar://E:\souche\souche-f2e\node_modules\weak\node_modules\bindings
143 verbose lock tar://E:\souche\souche-f2e\node_modules\weak\node_modules\bindings c:\Users\zilong\.npm\.cache_cnpm\d1dd3455-dules-weak-node-modules-bindings.lock
144 silly lockFile ca20ab1b--cnpm-bindings-1-2-1-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\bindings\1.2.1\package.tgz
145 verbose lock tar://c:\Users\zilong\.npm\.cache_cnpm\bindings\1.2.1\package.tgz c:\Users\zilong\.npm\.cache_cnpm\ca20ab1b--cnpm-bindings-1-2-1-package-tgz.lock
146 verbose tar unpack c:\Users\zilong\.npm\.cache_cnpm\nan\1.2.0\package.tgz
147 silly lockFile 236c470d-de-modules-weak-node-modules-nan tar://E:\souche\souche-f2e\node_modules\weak\node_modules\nan
148 verbose lock tar://E:\souche\souche-f2e\node_modules\weak\node_modules\nan c:\Users\zilong\.npm\.cache_cnpm\236c470d-de-modules-weak-node-modules-nan.lock
149 silly lockFile a1def062-cache-cnpm-nan-1-2-0-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\nan\1.2.0\package.tgz
150 verbose lock tar://c:\Users\zilong\.npm\.cache_cnpm\nan\1.2.0\package.tgz c:\Users\zilong\.npm\.cache_cnpm\a1def062-cache-cnpm-nan-1-2-0-package-tgz.lock
151 silly gunzTarPerm modes [ '755', '644' ]
152 silly gunzTarPerm modes [ '755', '644' ]
153 silly gunzTarPerm extractEntry package.json
154 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
155 silly gunzTarPerm extractEntry package.json
156 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
157 silly gunzTarPerm extractEntry README.md
158 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
159 silly gunzTarPerm extractEntry LICENSE
160 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
161 silly gunzTarPerm extractEntry include_dirs.js
162 silly gunzTarPerm modified mode [ 'include_dirs.js', 438, 420 ]
163 silly gunzTarPerm extractEntry .dntrc
164 silly gunzTarPerm modified mode [ '.dntrc', 438, 420 ]
165 silly gunzTarPerm extractEntry build/config.gypi
166 silly gunzTarPerm modified mode [ 'build/config.gypi', 438, 420 ]
167 silly gunzTarPerm extractEntry nan.h
168 silly gunzTarPerm modified mode [ 'nan.h', 438, 420 ]
169 silly gunzTarPerm extractEntry README.md
170 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
171 silly gunzTarPerm extractEntry bindings.js
172 silly gunzTarPerm modified mode [ 'bindings.js', 438, 420 ]
173 silly lockFile d1dd3455-dules-weak-node-modules-bindings tar://E:\souche\souche-f2e\node_modules\weak\node_modules\bindings
174 silly lockFile d1dd3455-dules-weak-node-modules-bindings tar://E:\souche\souche-f2e\node_modules\weak\node_modules\bindings
175 silly lockFile ca20ab1b--cnpm-bindings-1-2-1-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\bindings\1.2.1\package.tgz
176 silly lockFile ca20ab1b--cnpm-bindings-1-2-1-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\bindings\1.2.1\package.tgz
177 info preinstall bindings@1.2.1
178 verbose readDependencies using package.json deps
179 verbose readDependencies using package.json deps
180 silly resolved []
181 verbose about to build E:\souche\souche-f2e\node_modules\weak\node_modules\bindings
182 info build E:\souche\souche-f2e\node_modules\weak\node_modules\bindings
183 verbose linkStuff [ false,
183 verbose linkStuff   false,
183 verbose linkStuff   false,
183 verbose linkStuff   'E:\\souche\\souche-f2e\\node_modules\\weak\\node_modules' ]
184 info linkStuff bindings@1.2.1
185 verbose linkBins bindings@1.2.1
186 verbose linkMans bindings@1.2.1
187 verbose rebuildBundles bindings@1.2.1
188 info install bindings@1.2.1
189 info postinstall bindings@1.2.1
190 silly lockFile 236c470d-de-modules-weak-node-modules-nan tar://E:\souche\souche-f2e\node_modules\weak\node_modules\nan
191 silly lockFile 236c470d-de-modules-weak-node-modules-nan tar://E:\souche\souche-f2e\node_modules\weak\node_modules\nan
192 silly lockFile a1def062-cache-cnpm-nan-1-2-0-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\nan\1.2.0\package.tgz
193 silly lockFile a1def062-cache-cnpm-nan-1-2-0-package-tgz tar://c:\Users\zilong\.npm\.cache_cnpm\nan\1.2.0\package.tgz
194 info preinstall nan@1.2.0
195 verbose readDependencies using package.json deps
196 verbose readDependencies using package.json deps
197 silly resolved []
198 verbose about to build E:\souche\souche-f2e\node_modules\weak\node_modules\nan
199 info build E:\souche\souche-f2e\node_modules\weak\node_modules\nan
200 verbose linkStuff [ false,
200 verbose linkStuff   false,
200 verbose linkStuff   false,
200 verbose linkStuff   'E:\\souche\\souche-f2e\\node_modules\\weak\\node_modules' ]
201 info linkStuff nan@1.2.0
202 verbose linkBins nan@1.2.0
203 verbose linkMans nan@1.2.0
204 verbose rebuildBundles nan@1.2.0
205 info install nan@1.2.0
206 info postinstall nan@1.2.0
207 verbose about to build E:\souche\souche-f2e\node_modules\weak
208 info build E:\souche\souche-f2e\node_modules\weak
209 verbose linkStuff [ false, false, false, 'E:\\souche\\souche-f2e\\node_modules' ]
210 info linkStuff weak@0.3.3
211 verbose linkBins weak@0.3.3
212 verbose linkMans weak@0.3.3
213 verbose rebuildBundles weak@0.3.3
214 verbose rebuildBundles [ 'bindings', 'nan' ]
215 info install weak@0.3.3
216 verbose unsafe-perm in lifecycle true
217 info weak@0.3.3 Failed to exec install script
218 info E:\souche\souche-f2e\node_modules\weak unbuild
219 info preuninstall weak@0.3.3
220 info uninstall weak@0.3.3
221 verbose true,E:\souche\souche-f2e\node_modules,E:\souche\souche-f2e\node_modules unbuild weak@0.3.3
222 info postuninstall weak@0.3.3
223 error weak@0.3.3 install: `node-gyp rebuild`
223 error Exit status 1
224 error Failed at the weak@0.3.3 install script.
224 error This is most likely a problem with the weak package,
224 error not with npm itself.
224 error Tell the author that this fails on your system:
224 error     node-gyp rebuild
224 error You can get their info via:
224 error     npm owner ls weak
224 error There is likely additional logging output above.
225 error System Windows_NT 6.1.7601
226 error command "node" "c:\\Users\\zilong\\AppData\\Roaming\\npm\\node_modules\\cnpm\\node_modules\\npm\\bin\\npm-cli.js" "--userconfig=c:\\Users\\zilong\\.cnpmrc" "--disturl=http://dist.cnpmjs.org" "--cache=c:\\Users\\zilong\\.npm\\.cache_cnpm" "--registry=http://r.cnpmjs.org" "install" "weak" "--save"
227 error cwd E:\souche\souche-f2e
228 error node -v v0.11.10
229 error npm -v 1.4.6
230 error code ELIFECYCLE
231 verbose exit [ 1, true ]
